#include <stdio.h> 
#include <stdlib.h>
#include <time.h>
// Función que implementa el algoritmo Bubble Sort
void bubbleSort(int input[], int n, int output[]) {
    // Copiar el arreglo original al arreglo de salida
    for (int i = 0; i < n; i++) {
        output[i] = input[i];
    }
    // Aplicar Bubble Sort sobre el arreglo de salida
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (output[j] > output[j + 1]) {
                // Intercambio de elementos
                int temp = output[j];
                output[j] = output[j + 1];
                output[j + 1] = temp;
            }
        }
    }
    //imprimir arreglo no ordenado:
    //printf("Arreglo no ordenado: array=[");
    //for(int k=0; k<n; k++){
        //printf("%d,",input[k]);
    //}
    //printf("]\n");
    //imprimir arreglo no ordenado:
    //printf("Arreglo ordenado: array_ordenado=[");
    //for(int h=0; h<n; h++){
        //printf("%d,",output[h]);
    //}
    //printf("]\n");

}
int main(){
    int N=4096; //indicado en el programa
    int array[N], array_ordenado[N];
    clock_t inicio, fin;
    double cpu_time_used;
    //Se inicializa el generador de números aleatorios como no se
    srand(time(NULL));
    for (int j = 0; j < N; j++){
        array[j]=1 + (rand() % 100); // Como no especifica, se genera un número entre 1 y 100
    }
    //medidas de rendimiento:
    inicio=clock(); //inicio
    bubbleSort(array,N,array_ordenado);
    fin=clock(); //fin
    cpu_time_used = ((double) (fin - inicio)) / CLOCKS_PER_SEC;
    printf("Tiempo de CPU: %f segundos\n", cpu_time_used);
    

    return 0;
}
